"""
Orquestrador CrewAI para sistema de terapia familiar
Usa todos os agentes trabalhando em conjunto como uma crew
"""

from crewai import Crew, Process
from agents.terapeuta_principal import TerapeutaPrincipal  
from agents.genetograma_expert import GenetogramaExpert
from agents.ciclo_vida_analyzer import CicloVidaAnalyzer
from agents.padrao_analyzer import PadraoAnalyzer
from agents.reflexao_facilitator import ReflexaoFacilitator
from config import Config
from typing import Dict, Any
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TerapiaCrewOrchestrator:
    """Orquestrador que usa CrewAI para coordenar todos os agentes"""
    
    def __init__(self):
        # Validar configura√ß√£o
        Config.validate_config()
        
        # Instanciar todos os agentes especializados
        self.terapeuta_principal = TerapeutaPrincipal()
        self.genetograma_expert = GenetogramaExpert()
        self.ciclo_vida_analyzer = CicloVidaAnalyzer()
        self.padrao_analyzer = PadraoAnalyzer()
        self.reflexao_facilitator = ReflexaoFacilitator()
        
        # Estado da sess√£o
        self.session_state = {
            "historico": [],
            "contexto_familia": "",
            "insights_coletivos": [],
            "sessao_ativa": False
        }
        
        logger.info("‚úÖ TerapiaCrewOrchestrator inicializado com CrewAI")
    
    def iniciar_sessao(self, contexto_inicial: str) -> Dict[str, Any]:
        """Inicia uma sess√£o terap√™utica com toda a crew trabalhando juntas"""
        try:
            logger.info(f"üöÄ Iniciando sess√£o com contexto: {contexto_inicial[:100]}...")
            
            # Criar crew din√¢mica para esta sess√£o espec√≠fica
            from crewai import Task
            
            task_inicial = Task(
                description=f"""
                CONTEXTO DO CLIENTE: {contexto_inicial}
                
                INSTRU√á√ïES IMPORTANTES:
                - RESPONDA APENAS com base nas informa√ß√µes fornecidas pelo cliente
                - N√ÉO invente ou assuma informa√ß√µes n√£o mencionadas
                - Se o cliente apenas cumprimentou, fa√ßa um acolhimento simples e pergunte como pode ajudar
                - Se h√° informa√ß√µes espec√≠ficas, trabalhe com elas
                - Mantenha respostas proporcionais ao que foi compartilhado
                
                Como equipe terap√™utica, trabalhem de forma integrada:
                
                1. TERAPEUTA PRINCIPAL: Liderar com acolhimento emp√°tico apropriado ao contexto
                2. ESPECIALISTAS: Contribuir APENAS se houver informa√ß√µes relevantes no relato:
                   - Genetograma Expert: S√≥ mencionar se houver informa√ß√µes familiares
                   - Ciclo de Vida: S√≥ analisar se houver dados sobre est√°gio familiar
                   - Padr√£o Analyzer: S√≥ identificar padr√µes se mencionados
                   - Reflex√£o Facilitator: Fazer perguntas apropriadas ao n√≠vel de informa√ß√£o compartilhada
                
                OBJETIVO: Resposta terap√™utica proporcional que:
                - Acolha o cliente adequadamente
                - N√£o assuma informa√ß√µes n√£o fornecidas
                - Seja emp√°tica mas n√£o excessiva
                - Convide ao di√°logo de forma natural
                
                IMPORTANTE: Se o cliente apenas cumprimentou, responda com acolhimento simples e convite para compartilhar.
                """,
                expected_output="Resposta terap√™utica apropriada e proporcional ao contexto compartilhado"
                # Sem agent espec√≠fico - o manager decidir√° quem executa
            )
            
            # Criar crew espec√≠fica para esta sess√£o
            crew_sessao = Crew(
                agents=[
                    self.terapeuta_principal.get_agent(),
                    self.genetograma_expert.get_agent(),
                    self.ciclo_vida_analyzer.get_agent(),
                    self.padrao_analyzer.get_agent(),
                    self.reflexao_facilitator.get_agent()
                ],
                tasks=[task_inicial],
                process=Process.hierarchical,
                manager_llm=Config.get_llm(),  # Usar manager_llm em vez de manager_agent
                verbose=Config.DEBUG
                # Removido memory=Config.ENABLE_MEMORY para evitar erros de embeddings
            )
            
            # Executar a crew com inputs
            resultado = crew_sessao.kickoff(inputs={"contexto": contexto_inicial})
            
            # Atualizar estado da sess√£o
            self.session_state["contexto_familia"] = contexto_inicial
            self.session_state["sessao_ativa"] = True
            self.session_state["historico"].append({
                "tipo": "inicio_sessao",
                "contexto": contexto_inicial,
                "resposta_crew": str(resultado)
            })
            
            logger.info("‚úÖ Sess√£o iniciada com sucesso pela crew")
            
            return {
                "success": True,
                "agente": "ü§ù Equipe Terap√™utica Completa",
                "resposta": str(resultado),
                "tipo": "inicio_sessao",
                "emoji": "üöÄ"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar sess√£o: {e}")
            return {
                "success": False,
                "error": f"Erro ao iniciar sess√£o: {str(e)}"
            }
    
    def processar_mensagem(self, mensagem: str) -> Dict[str, Any]:
        """Processa uma mensagem usando toda a crew"""
        try:
            logger.info(f"üí¨ Processando mensagem: {mensagem[:100]}...")
            
            from crewai import Task
            
            # Criar contexto com hist√≥rico
            contexto_historico = "\n".join([
                f"- {item['contexto']}: {item['resposta_crew'][:200]}..." 
                for item in self.session_state["historico"][-3:]  # √öltimas 3 intera√ß√µes
            ])
            
            task_resposta = Task(
                description=f"""
                CONTEXTO DA SESS√ÉO: {self.session_state.get('contexto_familia', '')}
                
                HIST√ìRICO RECENTE:
                {contexto_historico}
                
                NOVA MENSAGEM DO CLIENTE: {mensagem}
                
                INSTRU√á√ïES IMPORTANTES:
                - RESPONDA com base apenas nas informa√ß√µes fornecidas pelo cliente
                - N√ÉO invente detalhes ou fa√ßa an√°lises sem dados concretos
                - Mantenha a resposta proporcional √† complexidade da mensagem
                - Use o hist√≥rico para manter continuidade, mas n√£o para criar informa√ß√µes
                
                Como equipe terap√™utica, trabalhem de forma integrada:
                
                1. TERAPEUTA PRINCIPAL: Coordenar resposta emp√°tica e contextual
                2. ESPECIALISTAS: Contribuir APENAS quando h√° dados relevantes:
                   - Genetograma: S√≥ se mencionou fam√≠lia/relacionamentos
                   - Ciclo de Vida: S√≥ se h√° informa√ß√µes sobre est√°gio familiar
                   - Padr√µes: S√≥ se identificou padr√µes reais na mensagem
                   - Reflex√£o: Perguntas apropriadas ao que foi compartilhado
                
                OBJETIVO: Resposta terap√™utica contextual que:
                - Demonstre escuta ativa do que foi realmente dito
                - Seja emp√°tica mas n√£o excessiva
                - Promova di√°logo natural
                - N√£o assuma informa√ß√µes n√£o fornecidas
                
                IMPORTANTE: Se a mensagem √© simples, responda de forma simples e acolhedora.
                """,
                expected_output="Resposta terap√™utica contextual e apropriada"
                # Sem agent espec√≠fico - o manager decidir√° quem executa
            )
            
            # Criar crew espec√≠fica para esta mensagem
            crew_resposta = Crew(
                agents=[
                    self.terapeuta_principal.get_agent(),
                    self.genetograma_expert.get_agent(),
                    self.ciclo_vida_analyzer.get_agent(),
                    self.padrao_analyzer.get_agent(),
                    self.reflexao_facilitator.get_agent()
                ],
                tasks=[task_resposta],
                process=Process.hierarchical,
                manager_llm=Config.get_llm(),  # Usar manager_llm em vez de manager_agent
                verbose=Config.DEBUG
                # Removido memory=Config.ENABLE_MEMORY para evitar erros de embeddings
            )
            
            # Executar crew com inputs
            resultado = crew_resposta.kickoff(inputs={"mensagem": mensagem, "historico": contexto_historico})
            
            # Atualizar hist√≥rico
            self.session_state["historico"].append({
                "tipo": "mensagem",
                "contexto": mensagem,
                "resposta_crew": str(resultado)
            })
            
            logger.info("‚úÖ Mensagem processada pela crew")
            
            return {
                "success": True,
                "agente": "ü§ù Equipe Terap√™utica",
                "resposta": str(resultado),
                "tipo": "resposta",
                "emoji": "üí≠"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar mensagem: {e}")
            return {
                "success": False,
                "error": f"Erro ao processar mensagem: {str(e)}"
            }
    
    def limpar_sessao(self):
        """Limpa o estado da sess√£o"""
        self.session_state = {
            "historico": [],
            "contexto_familia": "",
            "insights_coletivos": [],
            "sessao_ativa": False
        }
        logger.info("üóëÔ∏è Sess√£o limpa")
    
    def get_status(self) -> Dict[str, Any]:
        """Retorna status da sess√£o"""
        return {
            "sessao_ativa": self.session_state["sessao_ativa"],
            "num_interacoes": len(self.session_state["historico"]),
            "contexto_definido": bool(self.session_state["contexto_familia"])
        }
